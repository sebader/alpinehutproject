@page
@model WebUI.Pages.MapModel

@{
    ViewData["Title"] = "Map";
}

@section Scripts{
    <script>
        var map;
        var ajaxRequest= new XMLHttpRequest();
        var plotlist;
        var plotlayers = [];

        function initmap() {
            // set up the map
            map = new L.Map('map');

            // create the tile layer with correct attribution
            var osmUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
            var osmAttrib = 'Map data © <a href="https://openstreetmap.org">OpenStreetMap</a> contributors';
            var osm = new L.TileLayer(osmUrl, { minZoom: 6, attribution: osmAttrib });

            // Initial view on the Alps
            map.setView(new L.LatLng(46.90, 9.83), 7);
            map.addLayer(osm);

            // Initial load of huts to plot
            askForPlots();
            // Create event handler on map moved
            //map.on('moveend', onMapMove);
        }

        function onMapMove(e) { askForPlots(); }

        function askForPlots() {
            // request the huts info with AJAX for the current bounds
            var bounds = map.getBounds();
            var minll = bounds.getSouthWest();
            var maxll = bounds.getNorthEast();
            var url = 'api/Map?llLon=' + minll.lng + '&llLat=' + minll.lat + '&urLon=' + maxll.lng + '&urLat=' + maxll.lat;
            url = url.concat("&dateFilter=" + document.getElementById('DateFilter').value);

            ajaxRequest.onreadystatechange = mapRequestHandler;
            ajaxRequest.open('GET', url, true);
            ajaxRequest.send(null);
        }

        function mapRequestHandler() {
            // if AJAX returned a list of markers, add them to the map
            if (ajaxRequest.readyState == 4) {
                //use the info here that was returned
                if (ajaxRequest.status == 200) {
                    plotlist = eval("(" + ajaxRequest.responseText + ")");
                    removeMarkers();
                    for (i = 0; i < plotlist.length; i++) {
                        var plotll = new L.LatLng(plotlist[i].latitude, plotlist[i].longitude, true);
                        var plotmark = new L.Marker(plotll);
                        plotmark.data = plotlist[i];
                        map.addLayer(plotmark);

                        var toolTip = "<b>" + plotlist[i].name + "</b>";
                        if (plotlist[i].freeBeds != null)
                        {
                            toolTip = toolTip.concat("<br />Freie Plätze: " + plotlist[i].freeBeds);
                        }

                        plotmark.bindTooltip(toolTip);

                        var popupHtml = "<h6>" + plotlist[i].name + "</h6>";
                        if (plotlist[i].enabled == true) {
                            if (plotlist[i].freeBeds != null)
                            {
                                popupHtml = popupHtml.concat("Freie Plätze: " + plotlist[i].freeBeds);
                            }
                            popupHtml = popupHtml.concat("<br /><a target=\"_blank\" href=\"HutAvailability/" + plotlist[i].id + "\">Verfügbarkeitsübersicht</a>");                         
                            popupHtml = popupHtml.concat("<br /><a target=\"_blank\" href=\"" + plotlist[i].link + "\">Onlinebuchung</a>");
                        }
                        else
                        {
                            popupHtml = popupHtml.concat("<br />[Buchung inaktiv]");
                        }
                        plotmark.bindPopup(popupHtml);
                        plotlayers.push(plotmark);
                    }
                }
            }
        }

        // Function to clear all markers
        function removeMarkers() {
            for (i = 0; i < plotlayers.length; i++) {
                map.removeLayer(plotlayers[i]);
            }
            plotlayers = [];
        }

        // On change of the date field, reload the map
        $("#dateForm")
            .on("input", function () {
                askForPlots();
            });

        $(document).ready(function () {
            initmap();
            autocomplete(document.getElementById("mapSearch"));
        })

        // Search with autocomplete
        function autocomplete(inp) {
            /*the autocomplete function takes two arguments,
            the text field element and an array of possible autocompleted values:*/
            var currentFocus;
            /*execute a function when someone writes in the text field:*/
            inp.addEventListener("input", function (e) {
                var a, b, i, val = this.value;
                /*close any already open lists of autocompleted values*/
                closeAllLists();
                if (!val) { return false; }
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);
                /*for each item in the array...*/
                var arr = plotlist;
                for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                    var valField = arr[i].name; // We are searching on the name
                    if (valField.substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("DIV");
                        /*make the matching letters bold:*/
                        b.innerHTML = "<strong>" + valField.substr(0, val.length) + "</strong>";
                        b.innerHTML += valField.substr(val.length);
                        /*insert a input field that will hold the current array item's value:*/
                        b.innerHTML += "<input type='hidden' value='" + valField + "'>";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function (e) {
                            /*insert the value for the autocomplete text field:*/
                            inp.value = this.getElementsByTagName("input")[0].value;

                            for (var i = 0; i < plotlist.length; i++) {
                                if (plotlist[i].name === this.getElementsByTagName("input")[0].value) {
                                    //alert(plotlist[i].latitude + " " + plotlist[i].longitude);
                                    map.setView(new L.LatLng(plotlist[i].latitude, plotlist[i].longitude), 15);
                                    break;
                                }
                            }

                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                            // Do the search

                            
                        });
                        a.appendChild(b);
                    }
                }
            });
            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the "active" item:*/
                        if (x) x[currentFocus].click();
                    }
                }
            });
            function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
            }
            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }
            function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        } 

/**/</script>
}

<h1>Map</h1>
<div class="row justify-content-between">
    <div class="col-md-3">
        <div class="form-group">
            <form id="dateForm">
                <div>
                    <label asp-for="DateFilter">Verfügbarkeit an Datum</label>
                    <input asp-for="DateFilter" class="form-control" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                </div>
                <div>
                    <button class="btn btn-primary" onclick="document.getElementById('DateFilter').value = ''">Reset</button>
                </div>
            </form>
        </div>
    </div>
    <div class="col-md-3">
        <div class="autocomplete">
            <label>Suche nach einer Hütte</label>
            <input autocomplete="off" id="mapSearch" class="form-control" type="text" placeholder="Search">
        </div>
    </div>
</div>

<div id="map" class="map"></div>
